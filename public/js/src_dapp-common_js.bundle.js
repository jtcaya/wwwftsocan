"use strict";
/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkwwwftsocan"] = self["webpackChunkwwwftsocan"] || []).push([["src_dapp-common_js"],{

/***/ "./src/dapp-common.js":
/*!****************************!*\
  !*** ./src/dapp-common.js ***!
  \****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ConnectWalletClickClaim: () => (/* binding */ ConnectWalletClickClaim),\n/* harmony export */   ConnectWalletClickDelegate: () => (/* binding */ ConnectWalletClickDelegate),\n/* harmony export */   ConnectWalletClickWrap: () => (/* binding */ ConnectWalletClickWrap),\n/* harmony export */   copyWrapInput: () => (/* binding */ copyWrapInput),\n/* harmony export */   createSelectedNetwork: () => (/* binding */ createSelectedNetwork),\n/* harmony export */   getSelectedNetwork: () => (/* binding */ getSelectedNetwork),\n/* harmony export */   isDelegateInput1: () => (/* binding */ isDelegateInput1),\n/* harmony export */   isDelegateInput2: () => (/* binding */ isDelegateInput2),\n/* harmony export */   isDelegateInput3: () => (/* binding */ isDelegateInput3),\n/* harmony export */   isWalletConnected: () => (/* binding */ isWalletConnected),\n/* harmony export */   isWrapInput: () => (/* binding */ isWrapInput),\n/* harmony export */   populateFtsos: () => (/* binding */ populateFtsos),\n/* harmony export */   remove: () => (/* binding */ remove),\n/* harmony export */   showClaimRewards: () => (/* binding */ showClaimRewards),\n/* harmony export */   showFdRewards: () => (/* binding */ showFdRewards),\n/* harmony export */   showTokenIdentifiers: () => (/* binding */ showTokenIdentifiers),\n/* harmony export */   switchClaimButtonColor: () => (/* binding */ switchClaimButtonColor),\n/* harmony export */   switchClaimButtonColorBack: () => (/* binding */ switchClaimButtonColorBack),\n/* harmony export */   switchClaimFdButtonColor: () => (/* binding */ switchClaimFdButtonColor),\n/* harmony export */   switchClaimFdButtonColorBack: () => (/* binding */ switchClaimFdButtonColorBack),\n/* harmony export */   switchDelegateButtonColor: () => (/* binding */ switchDelegateButtonColor),\n/* harmony export */   switchDelegateButtonColorBack: () => (/* binding */ switchDelegateButtonColorBack),\n/* harmony export */   toggleWrapButton: () => (/* binding */ toggleWrapButton)\n/* harmony export */ });\n/* harmony import */ var _flare_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./flare-utils */ \"./src/flare-utils.js\");\n// ALL MODULES.\n\n\n\n\nasync function isConnected() {\n    const accounts = await _flare_utils__WEBPACK_IMPORTED_MODULE_0__.Provider.request({method: 'eth_accounts'});\n\n    if (accounts.length) {\n        // console.log(`You're connected to: ${accounts[0]}`);\n        return true;\n    } else {\n        // console.log(\"Metamask is not connected\");\n        return false;\n    }\n}\n\nasync function getSelectedNetwork(rpcUrl, chainidhex, networkValue, tokenIdentifier, wrappedTokenIdentifier) {\n    var selectedNetwork = document.getElementById(\"SelectedNetwork\");\n    rpcUrl = selectedNetwork?.options[selectedNetwork.selectedIndex].getAttribute('data-rpcurl');\n    chainidhex = selectedNetwork?.options[selectedNetwork.selectedIndex].getAttribute('data-chainidhex');\n    networkValue = selectedNetwork?.options[selectedNetwork.selectedIndex].value;\n    if (typeof tokenIdentifier !== 'undefined' || typeof wrappedTokenIdentifier !== 'undefined') {\n        tokenIdentifier = selectedNetwork?.options[selectedNetwork.selectedIndex].innerHTML;\n        wrappedTokenIdentifier = \"W\" + tokenIdentifier;\n    }\n}\n\n\nasync function createSelectedNetwork(metamaskInstalled) {\n    return new Promise((resolve) => {\n        setTimeout(async () => {\n            var networkSelectBox = document.getElementById('SelectedNetwork');\n\n            for (const property in dappNetworks) {\n                var option = document.createElement(\"option\");\n                option.value = dappNetworks[property].id;\n                option.text = dappNetworks[property].chainidentifier;\n                option.setAttribute('data-chainidhex', '0x' + dappNetworks[property].chainid.toString(16));\n                option.setAttribute('data-rpcurl', dappNetworks[property].rpcurl);\n                option.setAttribute('data-registrycontract', dappNetworks[property].registrycontract);\n\n                networkSelectBox.appendChild(option);\n            }\n\n            networkSelectBox.options[0].setAttribute('selected', 'selected');\n            networkSelectBox.options.selectedIndex = networkSelectBox.options[0].value;\n            \n            await _flare_utils__WEBPACK_IMPORTED_MODULE_0__.Provider.request({method: 'eth_requestAccounts'}).then(async function () {\n                if (!_flare_utils__WEBPACK_IMPORTED_MODULE_0__.Provider) {\n                    metamaskInstalled = false;\n                    downloadMetamask();\n                } else {\n                    metamaskInstalled = true;\n                    isConnected()\n                        .then(async function () {\n                            await _flare_utils__WEBPACK_IMPORTED_MODULE_0__.Provider.request({method: 'eth_accounts'}).then(async function () {\n                                var chainIdHexPromise = await _flare_utils__WEBPACK_IMPORTED_MODULE_0__.Provider.request({method: 'eth_chainId'}).then(async function(chainIdHex) {\n                                    var realChainId;\n\n                                    realChainId = networkSelectBox.options[0].getAttribute('data-chainidhex');\n\n                                    for (var i = 0; i < networkSelectBox.options.length; i++) {\n                                        if (networkSelectBox.options[i].getAttribute('data-chainidhex') === chainIdHex) {\n                                            networkSelectBox.options[i].setAttribute('selected', 'selected');\n                                            networkSelectBox.options.selectedIndex = networkSelectBox.options[i].value;\n                                            realChainId = chainIdHex;\n                                        } else {\n                                            networkSelectBox.options[i].removeAttribute('selected');\n                                        }\n                                    }\n\n                                    console.log(chainIdHex);\n                \n                                    if (metamaskInstalled === true) {\n                                        try {\n                                            await _flare_utils__WEBPACK_IMPORTED_MODULE_0__.Provider.request({ method: 'wallet_switchEthereumChain', params: [{\"chainId\": realChainId}] });\n                                        } catch (error) {\n                                            console.log(error);\n                                            if (error.code === 4902) {\n                                                try {\n                                                    await ethereum.request({\n                                                        \"method\": 'wallet_addEthereumChain',\n                                                        \"params\": [\n                                                            {\n                                                                \"chainId\": realChainId,\n                                                                \"rpcUrls\": [networkSelectBox.options[networkSelectBox.selectedIndex].getAttribute('data-rpcurl')],\n                                                                \"chainName\": `${networkSelectBox.options[networkSelectBox.selectedIndex].innerText} Mainnet`,\n                                                                \"iconUrls\": [\n                                                                    `https://portal.flare.network/token-logos/${networkSelectBox.options[networkSelectBox.selectedIndex].innerText}.svg`\n                                                                ],\n                                                                \"nativeCurrency\": {\n                                                                    \"name\": `${networkSelectBox.options[networkSelectBox.selectedIndex].innerText}`,\n                                                                    \"symbol\": `${networkSelectBox.options[networkSelectBox.selectedIndex].innerText}`,\n                                                                    \"decimals\": 18\n                                                                }\n                                                            },\n                                                        ],\n                                                    });\n                                                } catch (error) {\n                                                    throw(error);\n                                                }\n                                            }\n                                        }\n                                    }\n                                    resolve();\n                                });        \n                            })\n                        });\n                }\n            })\n        }, );\n    })\n}\n\n\nasync function isWalletConnected(ProviderObject) {\n    if (ProviderObject instanceof MetaMaskSDK.MetaMaskSDK) {\n        const accounts = await ProviderObject.request({method: 'eth_accounts'});\n\n        if (accounts.length) {\n            // console.log(`You're connected to: ${accounts[0]}`);\n            return true;\n        } else {\n            // console.log(\"Metamask is not connected\");\n            return false;\n        }\n    }\n}\n\n// Show the current token identifiers.\nfunction showTokenIdentifiers(token, wrappedToken) {\n    if (typeof token !== 'undefined') {\n        document.getElementById(\"tokenIdentifier\").innerText = token;\n    }\n\n    document.getElementById(\"wrappedTokenIdentifier\").innerText = wrappedToken;\n}\n\n// WRAP MODULE\n\nasync function ConnectWalletClickWrap(wrapBool, rpcUrl) {\n    var selectedNetwork = document.getElementById(\"SelectedNetwork\");\n    let web32 = new Web3(selectedNetwork?.options[selectedNetwork.selectedIndex].getAttribute('data-rpcurl'));\n\n    try {\n        var contractName = \"WNat\"\n        const wrappedTokenAddr = await (0,_flare_utils__WEBPACK_IMPORTED_MODULE_0__.GetContract)(contractName, rpcUrl);\n        let tokenContract = new web32.eth.Contract(ercAbi, wrappedTokenAddr);\n        const accounts = await _flare_utils__WEBPACK_IMPORTED_MODULE_0__.Provider.request({method: 'eth_requestAccounts'});\n        const account = accounts[0];\n        showAccountAddress(account);\n        const balance = await web32.eth.getBalance(account);\n        const tokenBalance = await tokenContract.methods.balanceOf(account).call();\n\n        if (wrapBool) {\n            showBalance(round(web32.utils.fromWei(balance, \"ether\")));\n            showTokenBalance(round(web32.utils.fromWei(tokenBalance, \"ether\")));\n        } else {\n            showBalance(round(web32.utils.fromWei(tokenBalance, \"ether\")));\n            showTokenBalance(round(web32.utils.fromWei(balance, \"ether\")));\n        }\n    } catch (error) {\n        // console.log(error);\n    }\n}\n\nasync function toggleWrapButton(currentValue, wrapBool, tokenIdentifier, wrappedTokenIdentifier) {\n    // Switching wrap/unwrap.\n    if (currentValue === \"false\") {\n        wrapBool = false;\n        document.getElementById(\"wrapUnwrap\").value = \"true\";\n        fromIcon.style.color = \"#000\";\n        toIcon.style.color = \"#fd000f\";\n        document.getElementById(\"Wrap\").style.color = \"#383a3b\";\n        document.getElementById(\"Unwrap\").style.color = \"#fd000f\";\n        showTokenIdentifiers(wrappedTokenIdentifier, tokenIdentifier);\n        isInput();\n    } else {\n        wrapBool = true;\n        document.getElementById(\"wrapUnwrap\").value = \"false\";\n        fromIcon.style.color = \"#fd000f\";\n        toIcon.style.color = \"#000\";\n        document.getElementById(\"Wrap\").style.color = \"#fd000f\";\n        document.getElementById(\"Unwrap\").style.color = \"#383a3b\";\n        showTokenIdentifiers(tokenIdentifier, wrappedTokenIdentifier);\n        isInput();\n    }\n\n    if (connectWalletBool === true) {\n        if (!_flare_utils__WEBPACK_IMPORTED_MODULE_0__.Provider && downloadMetamaskFlag === false) {\n            downloadMetamaskFlag = true;\n            downloadMetamask();\n        } else {\n            var selectedNetwork = document.getElementById(\"SelectedNetwork\");\n            let web32 = new Web3(selectedNetwork?.options[selectedNetwork.selectedIndex].getAttribute('data-rpcurl'));\n            let flareContract = new web32.eth.Contract(flrAbi, flrAddr);\n\n            try {\n                const isUnlocked = isWalletUnlocked();\n\n                if (await isUnlocked !== \"false\") {\n                    const SmartContracts = await flareContract.methods.getAllContracts().call();\n                    const wrappedTokenIndex = getKeyByValue(Object.values(SmartContracts)[0], \"WNat\");\n                    const wrappedTokenAddr = SmartContracts[1][wrappedTokenIndex];\n\n                    let tokenContract = new web32.eth.Contract(ercAbi, wrappedTokenAddr);\n\n                    const accounts = (await _flare_utils__WEBPACK_IMPORTED_MODULE_0__.Provider.send(\"eth_requestAccounts\")).result;\n                    const account = accounts[0];\n                    showAccountAddress(account);\n                    const balance = await web32.eth.getBalance(account);\n                    const tokenBalance = await tokenContract.methods.balanceOf(account).call();\n\n                    if (wrapBool === false) {\n                        showTokenBalance(round(web32.utils.fromWei(balance, \"ether\")));\n                        showBalance(round(web32.utils.fromWei(tokenBalance, \"ether\")));\n                    } else {\n                        showTokenBalance(round(web32.utils.fromWei(tokenBalance, \"ether\")));\n                        showBalance(round(web32.utils.fromWei(balance, \"ether\")));\n                    }\n                } else {\n                    $.alert(\"You are not connected!\");\n                }\n            } catch (error) {\n                // console.log(error);\n            }\n        }\n    }\n}\n\n// Is there a valid input?\nfunction isWrapInput(isRealValue) {\n    if (Number(document.getElementById(\"AmountFrom\").value.replace(/[^0-9]/g, '')) < 1) {\n        document.getElementById(\"WrapButton\").style.backgroundColor = \"rgba(143, 143, 143, 0.8)\";\n        document.getElementById(\"WrapButton\").style.cursor = \"auto\";\n        document.getElementById(\"WrapButtonText\").innerText = \"Enter Amount\";\n        isRealValue = false;\n    } else {\n        document.getElementById(\"WrapButton\").style.backgroundColor = \"rgba(253, 0, 15, 0.8)\";\n        document.getElementById(\"WrapButton\").style.cursor = \"pointer\";\n        isRealValue = true;\n\n        if (wrapBool === true) {\n            document.getElementById(\"WrapButtonText\").innerText = \"Wrap\";\n        } else {\n            document.getElementById(\"WrapButtonText\").innerText = \"Unwrap\";\n        }\n    }\n}\n\n// Copy the input.\nfunction copyWrapInput() {\n\n    let amountFrom = document.getElementById(\"AmountFrom\");\n    let amountTo = document.getElementById(\"AmountTo\");\n    let newValue = ''\n    \n    if (isNumber(amountFrom.value)) {\n        newValue = amountFrom.value;\n    }\n\n    amountTo.value = newValue;\n}\n\n// DELEGATE MODULE\n\nasync function ConnectWalletClickDelegate(rpcUrl) {\n    var selectedNetwork = document.getElementById(\"SelectedNetwork\");\n    let web32 = new Web3(selectedNetwork?.options[selectedNetwork.selectedIndex].getAttribute('data-rpcurl'));\n\n    try {\n        const wrappedTokenAddr = await (0,_flare_utils__WEBPACK_IMPORTED_MODULE_0__.GetContract)(\"WNat\", rpcUrl);\n        let tokenContract = new web32.eth.Contract(wnatAbi, wrappedTokenAddr);\n        const accounts = await _flare_utils__WEBPACK_IMPORTED_MODULE_0__.Provider.request({method: 'eth_requestAccounts'});\n        const account = accounts[0];\n        showAccountAddress(account);\n        const tokenBalance = await tokenContract.methods.balanceOf(account).call();\n        showTokenBalance(round(web32.utils.fromWei(tokenBalance, \"ether\")));\n    } catch (error) {\n        // console.log(error);\n    }\n};\n\n// Switch claim button to claimable.\nfunction switchDelegateButtonColor(claimBool) {\n    document.getElementById('ClaimButton').style.backgroundColor = \"rgba(253, 0, 15, 0.8)\";\n    claimBool = true;\n    document.getElementById('ClaimButton').style.cursor = \"pointer\";\n}\n\nfunction switchDelegateButtonColorBack(claimBool) {\n    document.getElementById('ClaimButton').style.backgroundColor = \"rgba(143, 143, 143, 0.8)\";\n    claimBool = false;\n    document.getElementById('ClaimButton').style.cursor = \"auto\";\n}\n\nfunction isDelegateInput1(isRealValue, isAmount2Active) {\n    let amount1 = document.getElementById(\"Amount1\");\n\n    if (Number(amount1.value.replace(/[^0-9]/g, '')) < 1 || Number(Amount1.value.replace(/^0-9]/g, '')) > 100) {\n        document.getElementById(\"ClaimButton\").style.backgroundColor = \"rgba(143, 143, 143, 0.8)\";\n        document.getElementById(\"ClaimButton\").style.cursor = \"auto\";\n        document.getElementById(\"ClaimButtonText\").innerText = \"Enter Amount\";\n        isRealValue = false;\n    } else {\n        if (Number(amount1.value.replace(/[^0-9]/g, '')) === 50 || Number(Amount1.value.replace(/[^0-9]/g, '')) === 100) {\n            document.getElementById(\"ClaimButton\").style.backgroundColor = \"rgba(253, 0, 15, 0.8)\";\n            document.getElementById(\"ClaimButton\").style.cursor = \"pointer\";\n            isRealValue = true;\n            document.getElementById(\"ClaimButtonText\").innerText = \"Delegate\";\n            isDelegateInput3(isRealValue, isAmount2Active);\n        } else {\n            document.getElementById(\"ClaimButton\").style.backgroundColor = \"rgba(143, 143, 143, 0.8)\";\n            document.getElementById(\"ClaimButton\").style.cursor = \"auto\";\n            document.getElementById(\"ClaimButtonText\").innerText = \"Enter Amount\";\n            isRealValue = false;\n        }\n    }\n}\n\nfunction isDelegateInput2(isRealValue, isAmount2Active) {\n    let amount2 = document.getElementById(\"Amount2\");\n\n    if (Number(amount2.value.replace(/[^0-9]/g, '')) < 1 || Number(Amount2.value.replace(/[^0-9]/g, '')) > 100) {\n        document.getElementById(\"ClaimButton\").style.backgroundColor = \"rgba(143, 143, 143, 0.8)\";\n        document.getElementById(\"ClaimButton\").style.cursor = \"auto\";\n        document.getElementById(\"ClaimButtonText\").innerText = \"Enter Amount\";\n        isRealValue = false;\n        isAmount2Active = false;\n    } else {\n        if (Number(amount2.value.replace(/[^0-9]/g, '')) === 50 || Number(Amount2.value.replace(/[^0-9]/g, '')) === 100) {\n            document.getElementById(\"ClaimButton\").style.backgroundColor = \"rgba(253, 0, 15, 0.8)\";\n            document.getElementById(\"ClaimButton\").style.cursor = \"pointer\";\n            isRealValue = true;\n            isAmount2Active = true;\n            document.getElementById(\"ClaimButtonText\").innerText = \"Delegate\";\n            isDelegateInput3(isRealValue, isAmount2Active);\n        } else {\n            document.getElementById(\"ClaimButton\").style.backgroundColor = \"rgba(143, 143, 143, 0.8)\";\n            document.getElementById(\"ClaimButton\").style.cursor = \"auto\";\n            document.getElementById(\"ClaimButtonText\").innerText = \"Enter Amount\";\n            isRealValue = false;\n            isAmount2Active = false;\n        }\n    }\n}\n\nfunction isDelegateInput3(isRealValue, isAmount2Active) {\n    let amount1 = document.getElementById(\"Amount1\");\n    let amount2 = document.getElementById(\"Amount2\");\n\n    if (Number(amount1.value.replace(/[^0-9]/g, '')) + Number(amount2.value.replace(/[^0-9]/g, '')) > 100 || Number(ftso1?.options[ftso1.selectedIndex]?.getAttribute('data-ftso')) === 0) {\n        document.getElementById(\"ClaimButton\").style.backgroundColor = \"rgba(143, 143, 143, 0.8)\";\n        document.getElementById(\"ClaimButton\").style.cursor = \"auto\";\n        document.getElementById(\"ClaimButtonText\").innerText = \"Enter Amount\";\n        isRealValue = false;\n        isAmount2Active = false;\n    } else {\n        if (Number(amount2.value.replace(/[^0-9]/g, '')) !== 0 && amount2.value.replace(/[^0-9]/g, '') !== '') {\n            if (ftso2?.options[ftso2.selectedIndex]?.getAttribute('data-ftso') === \"0\") {\n                document.getElementById(\"ClaimButton\").style.backgroundColor = \"rgba(143, 143, 143, 0.8)\";\n                document.getElementById(\"ClaimButton\").style.cursor = \"auto\";\n                document.getElementById(\"ClaimButtonText\").innerText = \"Enter Amount\";\n                isRealValue = false;\n                isAmount2Active = false;\n            } else {\n                document.getElementById(\"ClaimButton\").style.backgroundColor = \"rgba(253, 0, 15, 0.8)\";\n                document.getElementById(\"ClaimButton\").style.cursor = \"pointer\";\n                isRealValue = true;\n                isAmount2Active = true;\n                document.getElementById(\"ClaimButtonText\").innerText = \"Delegate\";\n            }\n        } else {\n            document.getElementById(\"ClaimButton\").style.backgroundColor = \"rgba(253, 0, 15, 0.8)\";\n            document.getElementById(\"ClaimButton\").style.cursor = \"pointer\";\n            isRealValue = true;\n            isAmount2Active = true;\n            document.getElementById(\"ClaimButtonText\").innerText = \"Delegate\";\n        }\n    }\n}\n\n// Populate select elements.\nasync function populateFtsos(ftso1, ftso2) {\n    var insert = '<option value=\"\" data-ftso=\"0\" disabled selected hidden>Select FTSO</option>';\n    var insert1 = '';\n    var insert2 = '';\n    var selectedNetwork = document.getElementById(\"SelectedNetwork\");\n    let web32 = new Web3(selectedNetwork?.options[selectedNetwork.selectedIndex].getAttribute('data-rpcurl'));\n    let flareContract = new web32.eth.Contract(flrAbi, flrAddr);\n\n    try {\n        const SmartContracts = await flareContract.methods.getAllContracts().call();\n        const voterWhitelistIndex = getKeyByValue(Object.values(SmartContracts)[0], \"VoterWhitelister\");\n        const voterWhitelistAddr = SmartContracts[1][voterWhitelistIndex];\n        let voterWhitelistContract = new web32.eth.Contract(voterWhitelisterAbiLocal, voterWhitelistAddr);\n\n        const ftsoList = await voterWhitelistContract.methods.getFtsoWhitelistedPriceProviders(0).call();\n\n        const ftsoJsonList = JSON.stringify(ftsoList);\n\n        // Origin: https://raw.githubusercontent.com/TowoLabs/ftso-signal-providers/next/bifrost-wallet.providerlist.json\n        fetch(dappUrlBaseAddr + 'bifrost-wallet.providerlist.json')\n            .then(res => res.json())\n            .then(FtsoInfo => {\n                FtsoInfo.providers.sort((a, b) => a.name > b.name ? 1 : -1);\n\n                let indexNumber;\n\n                for (var f = 0; f < FtsoInfo.providers.length; f++) {\n                    for (var i = 0; i < ftsoList.length; i++) {\n                        if (FtsoInfo.providers[f].address === ftsoList[i]) {\n                            indexNumber = f;\n                            //<img src=\"https://raw.githubusercontent.com/TowoLabs/ftso-signal-providers/master/assets/${delegatedFtsos[i]}.png\" class=\"delegatedIcon\" id=\"delegatedIcon\"/>\n\n                            if (ftsoJsonList.includes(ftsoList[i])) {\n                                if (FtsoInfo.providers[indexNumber].name === \"FTSOCAN\") {\n                                    // Origin: https://raw.githubusercontent.com/TowoLabs/ftso-signal-providers/master/assets.\n                                    insert1 += `<option value=\"${i}\" data-img=\"${dappUrlBaseAddr}assets/${ftsoList[i]}.png\" data-addr=\"${ftsoList[i]}\" data-ftso=\"1\">${FtsoInfo.providers[indexNumber].name}</option>`;\n                                } else {\n                                    // Origin: https://raw.githubusercontent.com/TowoLabs/ftso-signal-providers/master/assets.\n                                    insert2 += `<option value=\"${i}\" data-img=\"${dappUrlBaseAddr}assets/${ftsoList[i]}.png\" data-addr=\"${ftsoList[i]}\" data-ftso=\"1\">${FtsoInfo.providers[indexNumber].name}</option>`;\n                                }\n\n                                ftso1.innerHTML = insert + insert1 + insert2;\n                                ftso2.innerHTML = insert + insert1 + insert2;\n                            } else {\n                                alert('The FTSO you have delegated to is invalid!');\n                                break;\n                            }\n                        }\n                    }\n                }\n            });\n    } catch (error) {\n        // console.log(error)\n    }\n}\n\n// CLAIM MODULE\n\nasync function ConnectWalletClickClaim(claimBool, rpcUrl) {\n    var selectedNetwork = document.getElementById(\"SelectedNetwork\");\n    let web32 = new Web3(selectedNetwork?.options[selectedNetwork.selectedIndex].getAttribute('data-rpcurl'));\n\n    try {\n        const wrappedTokenAddr = (0,_flare_utils__WEBPACK_IMPORTED_MODULE_0__.GetContract)(\"WNat\", rpcUrl);\n        const DistributionDelegatorsAddr = (0,_flare_utils__WEBPACK_IMPORTED_MODULE_0__.GetContract)(\"DistributionToDelegators\", rpcUrl);\n        const ftsoRewardAddr = (0,_flare_utils__WEBPACK_IMPORTED_MODULE_0__.GetContract)(\"FtsoRewardManager\", rpcUrl);\n        const voterWhitelistAddr = (0,_flare_utils__WEBPACK_IMPORTED_MODULE_0__.GetContract)(\"VoterWhitelister\", rpcUrl);\n        let tokenContract = new web32.eth.Contract(wnatAbi, wrappedTokenAddr);\n        let DistributionDelegatorsContract = new web32.eth.Contract(distributionAbiLocal, DistributionDelegatorsAddr);\n        let ftsoRewardContract = new web32.eth.Contract(ftsoRewardAbiLocal, ftsoRewardAddr);\n        let voterWhitelistContract = new web32.eth.Contract(voterWhitelisterAbi, voterWhitelistAddr);\n        const accounts = (await _flare_utils__WEBPACK_IMPORTED_MODULE_0__.Provider.send(\"eth_requestAccounts\")).result;\n        const account = accounts[0];\n        showAccountAddress(account);\n        const balance = await web32.eth.getBalance(account);\n        const tokenBalance = await tokenContract.methods.balanceOf(account).call();\n        showTokenBalance(round(web32.utils.fromWei(tokenBalance, \"ether\")));\n        showFdRewards(0.0);\n        showRewards(0.0);\n\n        // Changing the color of Claim button.\n        if (Number(document.getElementById('ClaimButtonText').innerText) >= 1) {\n            switchClaimButtonColor(claimBool);\n        } else {\n            switchClaimButtonColorBack(claimBool);\n        }\n\n        if (Number(document.getElementById('ClaimFdButtonText').innerText) >= 1) {\n            switchClaimFdButtonColor(claimBool);\n        } else {\n            switchClaimFdButtonColorBack(claimBool);\n        }\n\n        remove(\".wrapBoxFTSO\");\n\n        // Getting which FTSO(s) the user has delegated to, the percentage of wnat he has\n        // delegated,and the logo of said FTSO(s).\n        const ftsoList = await voterWhitelistContract.methods.getFtsoWhitelistedPriceProviders(0).call();\n        const ftsoJsonList = JSON.stringify(ftsoList);\n        const delegatesOfUser = await tokenContract.methods.delegatesOf(account).call();\n        const delegatedFtsos = delegatesOfUser[0];\n        const BipsJson = delegatesOfUser[1];\n        const Bips = BipsJson[0] / 100n;\n        let insert1 = '';\n        let insert2 = '';\n\n        // Origin: https://raw.githubusercontent.com/TowoLabs/ftso-signal-providers/next/bifrost-wallet.providerlist.json\n        fetch(dappUrlBaseAddr + 'bifrost-wallet.providerlist.json')\n            .then(res => res.json())\n            .then(FtsoInfo => {\n                FtsoInfo.providers.sort((a, b) => a.name > b.name ? 1 : -1);\n\n                var indexNumber;\n\n                for (var f = 0; f < FtsoInfo.providers.length; f++) {\n                    indexNumber = f;\n\n                    for (var i = 0; i < delegatedFtsos.length; i++) {\n                        if (FtsoInfo.providers[f].address === delegatedFtsos[i]) {\n                            if (ftsoJsonList.includes(delegatedFtsos[i])) {\n                                if (FtsoInfo.providers[indexNumber].name === \"FTSOCAN\") {\n                                    // Origin: https://raw.githubusercontent.com/TowoLabs/ftso-signal-providers/master/assets.\n                                    insert1 = `<div class=\"wrapBoxFTSO\" data-addr=\"${delegatedFtsos[i]}\"><div class=\"wrapBoxContent\"><img src=\"${dappUrlBaseAddr}assets/${delegatedFtsos[i]}.png\" alt=\"${FtsoInfo.providers[indexNumber].name}\" class=\"delegatedIcon\" id=\"delegatedIcon\"/><div class=\"ftsoIdentifier\"><span id=\"delegatedName\">${FtsoInfo.providers[indexNumber].name}</span></div><div class=\"Wrapper\"><span id=\"TokenBalance\">${Bips}%</span></div></div></div>`;\n                                } else {\n                                    // Origin: https://raw.githubusercontent.com/TowoLabs/ftso-signal-providers/master/assets.\n                                    insert2 += `<div class=\"wrapBoxFTSO\" data-addr=\"${delegatedFtsos[i]}\"><div class=\"wrapBoxContent\"><img src=\"${dappUrlBaseAddr}assets/${delegatedFtsos[i]}.png\" alt=\"${FtsoInfo.providers[indexNumber].name}\" class=\"delegatedIcon\" id=\"delegatedIcon\"/><div class=\"ftsoIdentifier\"><span id=\"delegatedName\">${FtsoInfo.providers[indexNumber].name}</span></div><div class=\"Wrapper\"><span id=\"TokenBalance\">${Bips}%</span></div></div></div>`;\n                                }\n\n                                delegatedFtsoElement.innerHTML = insert1 + insert2;\n                            } else {\n                                $.alert('The FTSO you have delegated to is invalid!');\n                            }\n                        }\n                    }\n                }\n            });\n\n        // Getting the unclaimed Rewards and affecting the Claim button.\n        const epochsUnclaimed = await ftsoRewardContract.methods.getEpochsWithUnclaimedRewards(account).call();\n        let unclaimedAmount = 0;\n        let l;\n\n        for (var k = 0; k < epochsUnclaimed.length; k++) {\n            l = await ftsoRewardContract.methods.getStateOfRewards(account, epochsUnclaimed[k]).call();\n            unclaimedAmount += Number(l[1]);\n        }\n\n        const convertedRewards = web32.utils.fromWei(unclaimedAmount, \"ether\");\n\n        let claimableAmountFd;\n        const claimableMonths = await DistributionDelegatorsContract.methods.getClaimableMonths().call();\n\n        for (var m = 0; m < claimableMonths.length; m++) {\n            claimableAmountFd += await DistributionDelegatorsContract.methods.getClaimableAmountOf(account, Number(claimableMonths[m])).call();\n        }\n\n        var bucketTotal = await web32.eth.getBalance(ftsoRewardAddr);\n\n        // Changing the color of Claim buttons.\n        if (Number(round(convertedRewards)) >= 1 && Number(round(convertedRewards)) < bucketTotal) {\n            showRewards(round(convertedRewards));\n            switchClaimButtonColor(claimBool);\n        } else {\n            switchClaimButtonColorBack(claimBool);\n        }\n\n        var fdBucketTotal = await web32.eth.getBalance(DistributionDelegatorsAddr);\n\n        if (Number(document.getElementById('ClaimFdButtonText').innerText) >= 1 && Number(document.getElementById('ClaimFdButtonText').innerText) < fdBucketTotal) {\n            showFdRewards(String(round(web32.utils.fromWei(claimableAmountFd, \"ether\"))));\n            switchClaimFdButtonColor(claimBool);\n        } else {\n            switchClaimFdButtonColorBack(claimBool);\n        }\n    } catch (error) {\n        // console.log(error);\n    }\n}\n\n// Function to remove by id or class name.\nconst remove = (sel) => document.querySelectorAll(sel).forEach(el => el.remove());\n\n// Switch claim button to claimable.\nfunction switchClaimButtonColor(claimBool) {\n    document.getElementById('ClaimButton').style.backgroundColor = \"rgba(253, 0, 15, 0.8)\";\n    claimBool = true;\n    document.getElementById('ClaimButton').style.cursor = \"pointer\";\n}\n\nfunction switchClaimButtonColorBack(claimBool) {\n    document.getElementById('ClaimButton').style.backgroundColor = \"rgba(143, 143, 143, 0.8)\";\n    claimBool = false;\n    document.getElementById('ClaimButton').style.cursor = \"auto\";\n}\n\nfunction switchClaimFdButtonColor(fdClaimBool) {\n    document.getElementById('ClaimFdButton').style.backgroundColor = \"rgba(253, 0, 15, 0.8)\";\n    fdClaimBool = true;\n    document.getElementById('ClaimFdButton').style.cursor = \"pointer\";\n}\n\nfunction switchClaimFdButtonColorBack(fdClaimBool) {\n    document.getElementById('ClaimFdButton').style.backgroundColor = \"rgba(143, 143, 143, 0.8)\";\n    fdClaimBool = false;\n    document.getElementById('ClaimFdButton').style.cursor = \"auto\";\n}\n\n// Show current rewards.\nfunction showClaimRewards(Rewards) {\n    document.getElementById('ClaimButtonText').innerText = Rewards;\n}\n\n// Show current rewards.\nfunction showFdRewards(Rewards) {\n    document.getElementById('ClaimFdButtonText').innerText = Rewards;\n}\n\n//# sourceURL=webpack://wwwftsocan/./src/dapp-common.js?");

/***/ }),

/***/ "./src/flare-utils.js":
/*!****************************!*\
  !*** ./src/flare-utils.js ***!
  \****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   FlareAbis: () => (/* binding */ FlareAbis),\n/* harmony export */   FlareLogos: () => (/* binding */ FlareLogos),\n/* harmony export */   GetContract: () => (/* binding */ GetContract),\n/* harmony export */   Provider: () => (/* binding */ Provider),\n/* harmony export */   isNumber: () => (/* binding */ isNumber),\n/* harmony export */   round: () => (/* binding */ round),\n/* harmony export */   selectedNetwork: () => (/* binding */ selectedNetwork),\n/* harmony export */   showAccountAddress: () => (/* binding */ showAccountAddress),\n/* harmony export */   showBalance: () => (/* binding */ showBalance),\n/* harmony export */   showRewards: () => (/* binding */ showRewards),\n/* harmony export */   showTokenBalance: () => (/* binding */ showTokenBalance)\n/* harmony export */ });\nconst FlareAbis = {\n    DistributionToDelegators: distributionAbi,\n    VoterWhitelister: voterWhitelisterAbi,\n    FtsoRewardManager: ftsoRewardAbi,\n    WNat: wnatAbi,\n    FlareRegistry: flareAbi,\n};\n\nvar selectedNetwork = document.getElementById(\"SelectedNetwork\");\n\nconst FlareLogos = {\n    sgbLogo: '<g id=\"layer1-3\"><polygon points=\"124.29 316.35 0 538.51 101.68 508.22 124.29 316.35\"></polygon><polygon points=\"259.45 315.45 135.35 299.46 119.98 431.6 300.07 320.69 259.45 315.45\"></polygon><polygon points=\"195.58 206.32 233.21 158.92 40.08 0 133.09 285.06 195.58 206.32\"></polygon><polygon points=\"363.82 188.11 343.46 245.8 383.66 282.19 363.82 188.11\"></polygon><polygon points=\"263.6 221.16 263.6 221.16 238.46 166.78 215.95 195.14 139.88 290.97 265.69 307.18 305.76 312.35 263.6 221.16\"></polygon><polygon points=\"357 180.39 273.62 221.37 312.7 305.92 357 180.39\"></polygon></g>',\n    flrLogo: '<g id=\"layer1-2\" transform=\"matrix(1.7,0,0,1.7,-0,120)\"><path inkscape:connector-curvature=\"0\" d=\"M 1.54,44.88 C 1.54,44.88 0,44.043066 0,43.309998 0,29.293727 13.305791,-2.1604174e-7 44.83,-2.1604171e-7 c 7.083657,1e-14 178,0 178,0 0,0 1.54998,0.83699994604171 1.54,1.57000021604171 -0.28292,20.783154 -17.20265,43.31 -44.86,43.31 -7.19693,0 -177.97,0 -177.97,0 z\" id=\"path5842\" /><path inkscape:connector-curvature=\"0\" d=\"M -2.8370967e-7,133.36 C -0.01006008,134.093 1.5399997,134.93 1.5399997,134.93 c 0,0 73.8666673,0 110.8000003,0 25.5862,0 44.57708,-22.52684 44.86,-43.309998 0.01,-0.733001 -1.54,-1.570002 -1.54,-1.570002 0,0 -96.641983,0 -110.78,0 -25.4532,0 -44.5947035,22.52208 -44.88000028370967,43.31 z\" id=\"path5840\" /><path d=\"M 45.068739,202.56174 A 22.648399,22.301296 0 0 1 22.42034,224.86303 22.648399,22.301296 0 0 1 -0.22805977,202.56174 22.648399,22.301296 0 0 1 22.42034,180.26044 a 22.648399,22.301296 0 0 1 22.648399,22.3013 z\" id=\"path5799\" /></g>',\n    costonLogo: '<g id=\"layer1-2\"><path id=\"path5139\" d=\"M 110.76382,510.98934 C 70.863727,504.70145 37.406693,477.5049 25.686374,441.83158 21.84306,430.13361 19.836232,415.02432 21.826707,412.77241 c 1.424546,-1.61163 13.378995,-1.76178 115.549773,-1.45126 113.89386,0.34613 113.96658,0.34786 123.75346,2.93072 36.37734,9.60039 64.41727,34.6805 75.08928,67.16306 3.80582,11.58382 5.84887,26.80869 3.89427,29.02001 -1.37588,1.55658 -14.29072,1.74294 -112.48957,1.62329 -61.01439,-0.0744 -113.60143,-0.55536 -116.8601,-1.06889 z M 58.12374,360.57705 c -25.044789,-7.74036 -40.80884,-31.76562 -36.505138,-55.6358 5.200706,-28.84542 33.769366,-47.59015 63.581441,-41.71767 20.233567,3.98566 34.715427,16.60405 40.884757,35.62379 7.82371,24.12021 -6.46935,51.40502 -31.733007,60.57687 -9.9696,3.61941 -26.540903,4.14674 -36.228053,1.15281 z M 21.826707,211.65048 c -1.990475,-2.2519 0.0164,-17.36119 3.859667,-29.05914 10.672006,-32.48258 38.711933,-57.56269 75.089266,-67.16307 9.78689,-2.58285 9.8596,-2.58458 123.75348,-2.93073 102.17076,-0.31051 114.12522,-0.16035 115.54977,1.45129 1.99047,2.25188 -0.0165,17.36119 -3.85967,29.05914 -10.67201,32.48257 -38.71194,57.56268 -75.08928,67.16306 -9.78688,2.58287 -9.8596,2.58459 -123.75346,2.93073 -102.170778,0.3105 -114.125227,0.16037 -115.549773,-1.45128 z\"/></g>',\n}\n\nconst Provider = window.ethereum;\n\n// Getting the key of a function by its name.\nfunction getKeyByValue(object, value) {\n    return Object.keys(object).find(key => object[key] === value);\n}\n\nasync function GetContract(ContractName, rpcurl) {\n    var RPC = rpcurl;\n    let web3 = new Web3(RPC);\n    let flareContract = new web3.eth.Contract(FlareAbis.FlareRegistry, flrAddr);\n    const SmartContracts = await flareContract.methods.getAllContracts().call();\n    const wrappedTokenIndex = getKeyByValue(Object.values(SmartContracts)[0], ContractName);\n    const wrappedTokenAddr = SmartContracts[1][wrappedTokenIndex];\n\n    return wrappedTokenAddr;\n}\n\nfunction round(num) {\n    return +(Math.round(num + \"e+4\") + \"e-4\");\n}\n\n// Show user's account address.\nfunction showAccountAddress(address) {\n    document.getElementById('ConnectWalletText').innerText = address;\n}\n\n//Functions to show the requested info\nfunction showBalance(balanceAddress) {\n    document.getElementById(\"Balance\").innerText = balanceAddress;\n}\n\nfunction showTokenBalance(tokenBalanceAddress) {\n    document.getElementById(\"TokenBalance\").innerText = tokenBalanceAddress;\n}\n\n// Is value a number?\nfunction isNumber(value) {\n    if (void 0 === value || null === value) {\n        return false;\n    }\n    if (typeof value == \"number\") {\n        return true;\n    }\n    return !isNaN(value - 0);\n}\n\nfunction showRewards(Rewards) {\n    document.getElementById('ClaimButtonText').innerText = Rewards;\n}\n\n//# sourceURL=webpack://wwwftsocan/./src/flare-utils.js?");

/***/ })

}]);